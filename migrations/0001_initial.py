# Generated by Django 2.2 on 2020-01-22 13:39

# stdlib
from typing import List
# libs
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies: List[str] = [
    ]

    operations = [
        migrations.CreateModel(
            name='AddressNominalAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('address_id', models.IntegerField()),
                ('currency_id', models.IntegerField()),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'address_nominal_account',
            },
        ),
        migrations.CreateModel(
            name='Allocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('address_id', models.IntegerField()),
                ('nominal_account_number', models.IntegerField()),
            ],
            options={
                'db_table': 'allocation',
            },
        ),
        migrations.CreateModel(
            name='AllocationDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('credit_amount', models.DecimalField(decimal_places=4, max_digits=23)),
                ('debit_amount', models.DecimalField(decimal_places=4, max_digits=23)),
            ],
            options={
                'db_table': 'allocation_detail',
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('comment', models.TextField()),
                ('email_from', models.CharField(max_length=255)),
                ('email_to', models.CharField(max_length=255)),
                ('receiver_user_id', models.IntegerField()),
                ('sender_user_id', models.IntegerField()),
                ('status', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'email_log',
            },
        ),
        migrations.CreateModel(
            name='GlobalNominalAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('currency_id', models.IntegerField()),
                ('description', models.CharField(max_length=100)),
                ('external_reference', models.CharField(max_length=50, null=True)),
                ('member_id', models.IntegerField()),
                ('nominal_account_number', models.IntegerField()),
                ('valid_sales_account', models.BooleanField()),
                ('valid_purchases_account', models.BooleanField()),
            ],
            options={
                'db_table': 'global_nominal_account',
            },
        ),
        migrations.CreateModel(
            name='NominalAccountType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('description', models.CharField(max_length=25)),
                ('max_account_number', models.IntegerField()),
                ('min_account_number', models.IntegerField()),
            ],
            options={
                'db_table': 'nominal_account_type',
            },
        ),
        migrations.CreateModel(
            name='NominalContra',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('transaction_type_id', models.IntegerField()),
            ],
            options={
                'db_table': 'nominal_contra',
            },
        ),
        migrations.CreateModel(
            name='NominalLedger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('address_id', models.IntegerField()),
                ('address1_bill_to', models.CharField(max_length=100, null=True)),
                ('address1_deliver_to', models.CharField(max_length=100, null=True)),
                ('address2_bill_to', models.CharField(max_length=100, null=True)),
                ('address2_deliver_to', models.CharField(max_length=100, null=True)),
                ('address3_bill_to', models.CharField(max_length=100, null=True)),
                ('address3_deliver_to', models.CharField(max_length=100, null=True)),
                ('city_bill_to', models.CharField(max_length=50, null=True)),
                ('city_deliver_to', models.CharField(max_length=50, null=True)),
                ('contact', models.CharField(default='No Contact', max_length=100)),
                ('contra_address_id', models.IntegerField()),
                ('contra_contact', models.CharField(max_length=100, null=True)),
                ('country_id_bill_to', models.IntegerField(null=True)),
                ('country_id_deliver_to', models.IntegerField(null=True)),
                ('external_reference', models.CharField(max_length=50, null=True)),
                ('name_bill_to', models.CharField(max_length=250, null=True)),
                ('name_deliver_to', models.CharField(max_length=250, null=True)),
                ('narrative', models.CharField(max_length=250, null=True)),
                ('period_end_balance', models.DecimalField(decimal_places=4, max_digits=23, null=True)),
                ('postcode_bill_to', models.CharField(max_length=20, null=True)),
                ('postcode_deliver_to', models.CharField(max_length=20, null=True)),
                ('report_template_id', models.IntegerField(null=True)),
                ('subdivision_id_bill_to', models.IntegerField(null=True)),
                ('subdivision_id_deliver_to', models.IntegerField(null=True)),
                ('transaction_date', models.DateField()),
                ('transaction_type_id', models.IntegerField()),
                ('tsn', models.IntegerField()),
                ('unallocated_balance', models.DecimalField(decimal_places=4, default=0.0, max_digits=23)),
            ],
            options={
                'db_table': 'nominal_ledger',
            },
        ),
        migrations.CreateModel(
            name='NominalLedgerCredit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('amount', models.DecimalField(decimal_places=4, max_digits=23)),
                ('description', models.CharField(max_length=250, null=True)),
                ('exchange_rate', models.DecimalField(decimal_places=4, default='1.0000', max_digits=23)),
                ('nominal_account_number', models.IntegerField()),
                ('part_number', models.CharField(max_length=250, null=True)),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=18, null=True)),
                ('tax_percent', models.DecimalField(decimal_places=4, max_digits=23, null=True)),
                ('unit_price', models.DecimalField(decimal_places=4, max_digits=23, null=True)),
            ],
            options={
                'db_table': 'nominal_ledger_credits',
            },
        ),
        migrations.CreateModel(
            name='NominalLedgerDebit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('amount', models.DecimalField(decimal_places=4, max_digits=23)),
                ('description', models.CharField(max_length=250, null=True)),
                ('exchange_rate', models.DecimalField(decimal_places=4, default='1.0000', max_digits=23)),
                ('nominal_account_number', models.IntegerField()),
                ('part_number', models.CharField(max_length=250, null=True)),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=18, null=True)),
                ('tax_percent', models.DecimalField(decimal_places=4, max_digits=23, null=True)),
                ('unit_price', models.DecimalField(decimal_places=4, max_digits=23, null=True)),
            ],
            options={
                'db_table': 'nominal_ledger_debits',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('description', models.CharField(max_length=20)),
                ('member_id', models.IntegerField()),
            ],
            options={
                'db_table': 'payment_method',
            },
        ),
        migrations.CreateModel(
            name='StatementLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('address_id', models.IntegerField()),
                ('comment', models.TextField()),
                ('contra_address_id', models.IntegerField()),
                ('status', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'statement_log',
            },
        ),
        migrations.CreateModel(
            name='StatementSettings',
            fields=[
                ('address_id', models.IntegerField(primary_key=True, serialize=False)),
                ('day', models.IntegerField(null=True)),
                ('min_credit', models.DecimalField(decimal_places=4, max_digits=18, null=True)),
                ('min_debit', models.DecimalField(decimal_places=4, max_digits=18, null=True)),
                ('reply_to', models.TextField(null=True)),
                ('signature', models.TextField(default='')),
            ],
            options={
                'db_table': 'statement_settings',
                'ordering': ['address_id'],
            },
        ),
        migrations.CreateModel(
            name='TaxRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('address_id', models.IntegerField()),
                ('description', models.CharField(max_length=50)),
                ('percent', models.DecimalField(decimal_places=4, max_digits=23)),
            ],
            options={
                'db_table': 'tax_rate',
            },
        ),
        migrations.CreateModel(
            name='IntegrityTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('finish_time', models.DateTimeField()),
                ('records_tested', models.IntegerField()),
                ('errors_found', models.IntegerField()),
            ],
            options={
                'db_table': 'integrity_test',
            },
        ),
        migrations.AddIndex(
            model_name='taxrate',
            index=models.Index(fields=['id'], name='tax_rate_id'),
        ),
        migrations.AddIndex(
            model_name='taxrate',
            index=models.Index(fields=['description'], name='tax_rate_description'),
        ),
        migrations.AddIndex(
            model_name='taxrate',
            index=models.Index(fields=['percent'], name='tax_rate_percent'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['id'], name='payment_method_id'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['description'], name='payment_method_description'),
        ),
        migrations.AddField(
            model_name='nominalledgerdebit',
            name='nominal_ledger',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='debits',
                to='financial.NominalLedger',
            ),
        ),
        migrations.AddField(
            model_name='nominalledgerdebit',
            name='tax_rate',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='financial.TaxRate'),
        ),
        migrations.AddField(
            model_name='nominalledgercredit',
            name='nominal_ledger',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='credits',
                to='financial.NominalLedger',
            ),
        ),
        migrations.AddField(
            model_name='nominalledgercredit',
            name='tax_rate',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='financial.TaxRate'),
        ),
        migrations.AddField(
            model_name='nominalledger',
            name='contra_nominal_ledger',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='financial.NominalLedger',
            ),
        ),
        migrations.AddField(
            model_name='nominalcontra',
            name='global_nominal_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='financial.GlobalNominalAccount'),
        ),
        migrations.AddField(
            model_name='nominalcontra',
            name='payment_method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='financial.PaymentMethod'),
        ),
        migrations.AddIndex(
            model_name='nominalaccounttype',
            index=models.Index(fields=['id'], name='account_type_id'),
        ),
        migrations.AddIndex(
            model_name='nominalaccounttype',
            index=models.Index(fields=['description'], name='account_type_description'),
        ),
        migrations.AddIndex(
            model_name='nominalaccounttype',
            index=models.Index(fields=['min_account_number'], name='account_type_min_acc_number'),
        ),
        migrations.AddField(
            model_name='globalnominalaccount',
            name='nominal_account_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='financial.NominalAccountType'),
        ),
        migrations.AddField(
            model_name='emaillog',
            name='nominal_ledger',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='email_log',
                to='financial.NominalLedger',
            ),
        ),
        migrations.AddField(
            model_name='allocationdetail',
            name='allocation',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='details',
                to='financial.Allocation',
            ),
        ),
        migrations.AddField(
            model_name='allocationdetail',
            name='nominal_ledger',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='financial.NominalLedger'),
        ),
        migrations.AddIndex(
            model_name='allocation',
            index=models.Index(fields=['id'], name='allocation_id'),
        ),
        migrations.AddField(
            model_name='addressnominalaccount',
            name='global_nominal_account',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='address_nominal_accounts',
                to='financial.GlobalNominalAccount',
            ),
        ),
        migrations.AddIndex(
            model_name='nominalledgerdebit',
            index=models.Index(fields=['tax_percent'], name='ledger_debit_tax_percent'),
        ),
        migrations.AddIndex(
            model_name='nominalledgercredit',
            index=models.Index(fields=['tax_percent'], name='ledger_credit_tax_percent'),
        ),
        migrations.AddIndex(
            model_name='nominalledger',
            index=models.Index(fields=['contra_address_id'], name='ledger_contra_address_id'),
        ),
        migrations.AddIndex(
            model_name='nominalledger',
            index=models.Index(fields=['contra_nominal_ledger'], name='ledger_contra_nominal_ledger'),
        ),
        migrations.AddIndex(
            model_name='nominalledger',
            index=models.Index(fields=['narrative'], name='ledger_narrative'),
        ),
        migrations.AddIndex(
            model_name='nominalledger',
            index=models.Index(fields=['period_end_balance'], name='ledger_period_end_balance'),
        ),
        migrations.AddIndex(
            model_name='nominalledger',
            index=models.Index(fields=['transaction_date'], name='ledger_transaction_date'),
        ),
        migrations.AddIndex(
            model_name='nominalledger',
            index=models.Index(fields=['transaction_type_id'], name='ledger_transaction_type_id'),
        ),
        migrations.AddIndex(
            model_name='nominalledger',
            index=models.Index(fields=['tsn'], name='ledger_tsn'),
        ),
        migrations.AddIndex(
            model_name='nominalledger',
            index=models.Index(fields=['unallocated_balance'], name='ledger_unallocated_balance'),
        ),
        migrations.AddIndex(
            model_name='nominalcontra',
            index=models.Index(fields=['id'], name='nom_contra_id'),
        ),
        migrations.AddIndex(
            model_name='nominalcontra',
            index=models.Index(fields=['transaction_type_id'], name='nom_contra_transaction_type_id'),
        ),
        migrations.AddIndex(
            model_name='globalnominalaccount',
            index=models.Index(fields=['id'], name='global_account_id'),
        ),
        migrations.AddIndex(
            model_name='globalnominalaccount',
            index=models.Index(fields=['description'], name='global_account_description'),
        ),
        migrations.AddIndex(
            model_name='globalnominalaccount',
            index=models.Index(fields=['external_reference'], name='global_account_external_ref'),
        ),
        migrations.AddIndex(
            model_name='globalnominalaccount',
            index=models.Index(fields=['nominal_account_number'], name='global_account_number'),
        ),
        migrations.AddIndex(
            model_name='addressnominalaccount',
            index=models.Index(fields=['id'], name='address_account_id'),
        ),
        migrations.AddIndex(
            model_name='addressnominalaccount',
            index=models.Index(fields=['address_id'], name='address_account_address_id'),
        ),

        migrations.RunSQL("""
            -------------------------------------------------------------
            -- View used to get the Nominal Accounts and their balance --
            -------------------------------------------------------------
            -- It would be preferable to find a way to do this using the Django ORM instead

            CREATE OR REPLACE VIEW "nominal_account_history"
            AS
            SELECT
                "address_id", "contra_address_id", "tsn", "transaction_type_id", "transaction_date", "narrative",
                "name_bill_to", "id" AS nominal_ledger_id, "nominal_account_number", SUM(amount) AS amount,
                ROW_NUMBER() OVER() AS id
            FROM
            (
                SELECT
                    "address_id", "contra_address_id", "tsn", "transaction_type_id", "transaction_date", "narrative",
                    "name_bill_to", NL."id", "nominal_account_number", SUM("amount") * -1 AS amount
                FROM "nominal_ledger" as NL
                INNER JOIN "nominal_ledger_credits" as NLC
                ON NL."id" = NLC."nominal_ledger_id"
                WHERE NL."deleted" IS NULL AND NLC."deleted" IS NULL
                GROUP BY
                    "address_id", "contra_address_id", "tsn", "transaction_type_id", "transaction_date", "narrative",
                    "name_bill_to", NL."id", "nominal_account_number"

                UNION ALL
                SELECT
                    "address_id", "contra_address_id", "tsn", "transaction_type_id", "transaction_date", "narrative",
                    "name_bill_to", NL."id", "nominal_account_number", SUM("amount") AS amount
                FROM "nominal_ledger" as NL
                INNER JOIN "nominal_ledger_debits" as NLD
                ON NL."id" = NLD."nominal_ledger_id"
                WHERE NL."deleted" IS NULL AND NLD."deleted" IS NULL
                GROUP BY
                    "address_id", "contra_address_id", "tsn", "transaction_type_id", "transaction_date", "narrative",
                    "name_bill_to", NL."id", "nominal_account_number"
            ) t
            GROUP BY
                "address_id", "contra_address_id", "tsn", "transaction_type_id", "transaction_date", "narrative",
                "name_bill_to", "id", "nominal_account_number";
        """),
    ]
