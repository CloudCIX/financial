# Generated by Django 2.2 on 2019-05-20 11:41
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('financial', '0001_initial'),
    ]

    operations = [
        # ############################################################################## #
        #         Calculate the transaction_sequence_numeber for a Nominal Ledger        #
        # ############################################################################## #
        migrations.RunSQL("""
            CREATE OR REPLACE FUNCTION insert_nominal_ledger_tsn()
                RETURNS TRIGGER AS
            $BODY$
            DECLARE
                new_tsn integer;
            BEGIN
                SELECT COALESCE(
                    MAX(tsn),
                    0
                ) + 1 INTO new_tsn
                FROM nominal_ledger
                WHERE deleted IS NULL
                AND address_id = NEW.address_id
                AND transaction_type_id = NEW.transaction_type_id;
                New.tsn := new_tsn;
                IF NEW.tsn IS NULL THEN
                    NEW.tsn := 1;
                END IF;
                RETURN NEW;
            END;
            $BODY$

            LANGUAGE plpgsql VOLATILE
            COST 100;
        """),
        # ############################################################################## #
        #           Calculate the unallocated balance for an id_nominal_ledger           #
        # ############################################################################## #
        migrations.RunSQL("""
            CREATE OR REPLACE FUNCTION get_unallocated_balance(id_nominal_ledger integer)
                RETURNS decimal(23,4) AS
            $BODY$
            DECLARE
                unallocated_balance decimal(23, 4);
            BEGIN
                SELECT COALESCE(SUM(total), 0) INTO unallocated_balance
                FROM (SELECT COALESCE(nominal_ledger_debits.amount, 0) AS total
                FROM nominal_ledger_debits
                WHERE nominal_ledger_id = id_nominal_ledger
                    AND nominal_account_number IN (1300, 2200)
                    AND deleted IS NULL
                UNION ALL
                SELECT COALESCE(nominal_ledger_credits.amount, 0) * -1 AS total
                FROM nominal_ledger_credits
                WHERE nominal_ledger_id = id_nominal_ledger
                    AND nominal_account_number IN (1300, 2200)
                    AND deleted IS NULL
                UNION ALL
                SELECT COALESCE(SUM(debit_amount), 0) + COALESCE(SUM(credit_amount), 0) AS total
                FROM allocation_detail
                WHERE nominal_ledger_id = id_nominal_ledger AND deleted IS NULL) t;
                RETURN unallocated_balance;
            END
            $BODY$
                LANGUAGE plpgsql VOLATILE
                COST 100;
        """),
        # ############################################################################## #
        #            Update the unallocated_balance in the nominal_ledger              #
        # ############################################################################## #
        migrations.RunSQL("""
            CREATE OR REPLACE FUNCTION update_unallocated_balance()
                RETURNS trigger AS
            $BODY$
            BEGIN
                UPDATE nominal_ledger
                SET unallocated_balance = get_unallocated_balance(NEW.nominal_ledger_id)
                WHERE id = NEW.nominal_ledger_id;
                RETURN NEW;
            END;
            $BODY$
                LANGUAGE plpgsql VOLATILE
                COST 100;
        """),
        # ############################################################################## #
        #                                    Triggers                                    #
        # ############################################################################## #
        migrations.RunSQL("""
            CREATE TRIGGER nominal_ledger_tsn
                BEFORE INSERT ON nominal_ledger
                FOR EACH ROW EXECUTE PROCEDURE insert_nominal_ledger_tsn();
        """),

        migrations.RunSQL("""
            CREATE TRIGGER allocation_create_balance
                AFTER INSERT OR UPDATE ON allocation_detail
                FOR EACH ROW EXECUTE PROCEDURE update_unallocated_balance();
        """),
    ]
